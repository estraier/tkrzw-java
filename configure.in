# Source of configuration for Tkrzw for Java

#================================================================
# Generic Settings
#================================================================

# Package name
AC_INIT([tkrzw-java], [0.1.30])

# Package information
MYLIBVER=0
MYLIBREV=27

# Targets
MYJARFILES="tkrzw.jar"
MYJAVAFILES="Utility.java Status.java Future.java StatusException.java DBM.java Iterator.java RecordProcessor.java AsyncDBM.java File.java Test.java"
MYHEADERFILES="tkrzw_Utility.h tkrzw_Future.h tkrzw_DBM.h tkrzw_Iterator.h tkrzw_AsyncDBM.h tkrzw_File.h"
MYLIBRARYFILES=""
MYLIBOBJFILES="tkrzw.o"

# Building flags
MYJAVACFLAGS="-d ."
MYJAVADOCFLAGS="-locale en -tag note:a:"Note:" -nodeprecated -nohelp -quiet -noqualifier all"
MYJAVARUNFLAGS="-cp tkrzw.jar"
MYCXXFLAGS="-std=c++17 -Wall -fPIC -fsigned-char -O2"
MYCPPFLAGS="-I. -I\$(INCLUDEDIR) -I$HOME/include -I$HOME/local/include -I/usr/local/include -DNDEBUG"
MYLDFLAGS="-L. -L\$(LIBDIR) -L$HOME/lib -L$HOME/local/lib -L/usr/local/lib"
MYRUNPATH="\$(LIBDIR)"
MYLDLIBPATHENV="LD_LIBRARY_PATH"

# Building paths
pathtmp="$PATH"
PATH="$HOME/bin:$HOME/local/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
PATH="$PATH:/usr/ccs/bin:/usr/ucb:/usr/xpg4/bin:/usr/xpg6/bin:$pathtmp"
LIBRARY_PATH="$HOME/lib:$HOME/local/lib:/usr/local/lib:$LIBRARY_PATH"
LD_LIBRARY_PATH="$HOME/lib:$HOME/local/lib:/usr/local/lib:$LD_LIBRARY_PATH"
CPATH="$HOME/include:$HOME/local/include:/usr/local/include:$CPATH"
PKG_CONFIG_PATH="$HOME/lib/pkgconfig:$HOME/local/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
export PATH LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH
if type pkg-config >config.tmp 2>&1
then
  PATH="$PATH:`pkg-config --variable=bindir tkrzw`"
  LIBRARY_PATH="$LIBRARY_PATH:`pkg-config --variable=libdir tkrzw`"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:`pkg-config --variable=libdir tkrzw`"
  CPATH="$CPATH:`pkg-config --variable=includedir tkrzw`"
  export PATH LIBRARY_PATH LD_LIBRARY_PATH CPATH PKG_CONFIG_PATH
fi

# Specify the installation path of Tkrzw
AC_ARG_WITH(tkrzw,
  AS_HELP_STRING([--with-tkrzw=DIR], [search DIR/include and DIR/lib for Tkrzw]))
if test -n "$with_tkrzw"
then
  MYCPPFLAGS="$MYCPPFLAGS -I$with_tkrzw/include"
  MYLDFLAGS="$MYLDFLAGS -L$with_tkrzw/lib"
  CPATH="$CPATH:$with_tkrzw/include"
  LIBRARY_PATH="$LIBRARY_PATH:$with_tkrzw/lib"
  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$with_tkrzw/lib"
  PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$with_tkrzw/lib/pkgconfig"
fi

# Messages
printf '#================================================================\n'
printf '# Configuring Tkrzw for Java version %s.\n' "$PACKAGE_VERSION"
printf '#================================================================\n'

#================================================================
# Checking Commands and Libraries
#================================================================

# Home directory of Java
printf 'checking MYJAVAHOME... '
if test -d "$JAVA_HOME"
then
  MYJAVAHOME="$JAVA_HOME"
fi
printf '%s\n' "$MYJAVAHOME"

# Platform of Java
printf 'checking JVMPLATFORM... '
if uname | grep Darwin >config.tmp
then
  JVMPLATFORM="mac"
  if test -d "$MYJAVAHOME/include/darwin"
  then
    JVMPLATFORM="darwin"
  fi
else
  for file in `\ls $MYJAVAHOME/include`
  do
    if test -d "$MYJAVAHOME/include/$file"
    then
      JVMPLATFORM="$file"
    fi
  done
fi
printf '%s\n' "$JVMPLATFORM"
for suffix in include include/$JVMPLATFORM Header Header/$JVMPLATFORM
do
  if test -d "$MYJAVAHOME/$suffix"
  then
    MYCPPFLAGS="$MYCPPFLAGS -I$MYJAVAHOME/$suffix"
    CPATH="$CPATH:$MYJAVAHOME/$suffix"
  fi
done

# Java compiler
printf 'checking JAVAC... '
JAVAC="$MYJAVAHOME/bin/javac"
if uname | grep Darwin >config.tmp
then
  if test -x "$MYJAVAHOME/Commands/javac"
  then
    JAVAC="$MYJAVAHOME/Commands/javac"
  else
    JAVAC="$MYJAVAHOME/bin/javac"
  fi
fi
if test -x "$JAVAC"
then
  printf '%s\n' "$JAVAC"
else
  printf 'no\n'
  printf '#================================================================\n' 1>&2
  printf '# WARNING: %s is not found.\n' "$JAVAC" 1>&2
  printf '#================================================================\n' 1>&2
fi

# Other building tools
if uname | grep Darwin >config.tmp
then
  if test -x "$MYJAVAHOME/Commands/java"
  then
    JAR="$MYJAVAHOME/Commands/jar"
    JAVAH="$MYJAVAHOME/Commands/javah"
    JAVADOC="$MYJAVAHOME/Commands/javadoc"
    JAVARUN="$MYJAVAHOME/Commands/java"
  else
    JAR="$MYJAVAHOME/bin/jar"
    JAVAH="$MYJAVAHOME/bin/javah"
    JAVADOC="$MYJAVAHOME/bin/javadoc"
    JAVARUN="$MYJAVAHOME/bin/java"
  fi
else
  JAR="$MYJAVAHOME/bin/jar"
  JAVAH="$MYJAVAHOME/bin/javah"
  JAVADOC="$MYJAVAHOME/bin/javadoc"
  JAVARUN="$MYJAVAHOME/bin/java"
fi
MYJAVARUNFLAGS="$MYJAVARUNFLAGS -Djava.library.path=.:$LD_LIBRARY_PATH"

# C compiler
AC_PROG_CC
AC_PROG_CXX
AC_LANG(C++)

# Underlying libraries
AC_CHECK_LIB(c, main)
AC_CHECK_LIB(m, main)
AC_CHECK_LIB(pthread, main)
AC_CHECK_LIB(atomic, main)
AC_CHECK_LIB(rt, main)
AC_CHECK_LIB(stdc++, main)
AC_CHECK_LIB(z, main)
AC_CHECK_LIB(zstd, main)
AC_CHECK_LIB(lz4, main)
AC_CHECK_LIB(lzma, main)
AC_CHECK_LIB(tkrzw, main)

# Necessary headers
AC_CHECK_HEADER(stdlib.h, true, AC_MSG_ERROR([stdlib.h is required]))
AC_CHECK_HEADER(stdint.h, true, AC_MSG_ERROR([stdint.h is required]))
AC_CHECK_HEADER(tkrzw_langc.h, true, AC_MSG_ERROR([tkrzw_langc.h is required]))
AC_CHECK_HEADER(jni.h, true, AC_MSG_ERROR([jni.h is required]))

# Checking the version of Tkrzw with pkg-config
if type pkg-config >config.tmp 2>&1
then
  printf 'checking Tkrzw by pkg-config... '
  if pkg-config --atleast-version=1.0.2 tkrzw
  then
    MYCPPFLAGS="$MYCPPFLAGS -I`pkg-config --variable=includedir tkrzw`"
    MYLDFLAGS="$MYLDFLAGS -L`pkg-config --variable=libdir tkrzw`"
    MYRUNPATH="$MYRUNPATH:`pkg-config --variable=libdir tkrzw`"
    printf 'yes\n'
  else
    printf 'no\n'
    AC_MSG_ERROR([required version of Tkrzw was not detected])
  fi
fi

# Shared libraries
if uname | grep Darwin >config.tmp
then
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.$MYLIBVER.$MYLIBREV.0.dylib"
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.$MYLIBVER.dylib"
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.dylib"
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.jnilib"
  MYLDLIBPATHENV="DYLD_LIBRARY_PATH"
else
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.so.$MYLIBVER.$MYLIBREV.0"
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.so.$MYLIBVER"
  MYLIBRARYFILES="$MYLIBRARYFILES libjtkrzw.so"
fi

#================================================================
# Generic Settings
#================================================================

# Export variables
AC_SUBST(JAVAC)
AC_SUBST(JAR)
AC_SUBST(JAVAH)
AC_SUBST(JAVADOC)
AC_SUBST(JAVARUN)
AC_SUBST(MYLIBVER)
AC_SUBST(MYLIBREV)
AC_SUBST(MYJARFILES)
AC_SUBST(MYJAVAFILES)
AC_SUBST(MYHEADERFILES)
AC_SUBST(MYLIBRARYFILES)
AC_SUBST(MYLIBOBJFILES)
AC_SUBST(MYJAVAHOME)
AC_SUBST(MYJAVACFLAGS)
AC_SUBST(MYJAVADOCFLAGS)
AC_SUBST(MYJAVARUNFLAGS)
AC_SUBST(MYCXXFLAGS)
AC_SUBST(MYCPPFLAGS)
AC_SUBST(MYLDFLAGS)
AC_SUBST(MYRUNPATH)
AC_SUBST(MYLDLIBPATHENV)

# Targets
AC_CONFIG_FILES([Makefile])
AC_OUTPUT

# Messages
printf '#================================================================\n'
printf '# Ready to make.\n'
printf '#================================================================\n'

# END OF FILE
