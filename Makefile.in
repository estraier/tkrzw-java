# Makefile for Tkrzw for Java

#================================================================
# Setting Variables
#================================================================

# Generic settings
SHELL = @SHELL@

# Package information
PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
PACKAGEDIR = $(PACKAGE)-$(VERSION)
PACKAGETGZ = $(PACKAGE)-$(VERSION).tar.gz
LIBVER = @MYLIBVER@
LIBREV = @MYLIBREV@

# Targets
JARFILES = @MYJARFILES@
JAVAFILES = @MYJAVAFILES@
HEADERCLASSES = @MYHEADERCLASSES@
HEADERFILES = @MYHEADERFILES@
LIBRARYFILES = @MYLIBRARYFILES@
LIBOBJFILES = @MYLIBOBJFILES@

# Install destinations
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
LIBDIR = @libdir@
JAVADIR = @datarootdir@/java
DESTDIR =

# Building configuration
JAVAC = @JAVAC@
JAVACFLAGS = @MYJAVACFLAGS@
JAR = @JAR@
JAVADOC = @JAVADOC@
JAVADOCFLAGS = @MYJAVADOCFLAGS@
JAVARUN = @JAVARUN@
JAVARUNFLAGS = @MYJAVARUNFLAGS@
CXX = @CXX@
CPPFLAGS = @MYCPPFLAGS@
CXXFLAGS = @MYCXXFLAGS@
LDFLAGS = @MYLDFLAGS@
LIBS = @LIBS@
LDENV = LD_RUN_PATH=/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@:.
RUNENV = @MYLDLIBPATHENV@=.:/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@

#================================================================
# Actions
#================================================================

all : $(JARFILES) $(LIBRARYFILES)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Ready to install.\n'
	@printf '#================================================================\n'

clean :
	rm -rf $(JARFILES) $(HEADERFILES) $(LIBRARYFILES) $(LIBOBJFILES) \
	  *.o a.out *.class check.in check.out gmon.out *.vlog \
	  casket* *.tkh *.tkt *.tks *.flat *.log *~ hoge moge tako ika uni

untabify :
	ls *.cc *.h *.java | while read name ; \
	  do \
	    sed -e 's/\t/        /g' -e 's/ *$$//' $$name > $$name~; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done

install :
	mkdir -p $(DESTDIR)$(JAVADIR) $(DESTDIR)$(LIBDIR)
	cp -Rf $(JARFILES) $(DESTDIR)$(JAVADIR)
	cp -Rf $(LIBRARYFILES) $(DESTDIR)$(LIBDIR)
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Thanks for using Tkrzw for Java.\n'
	@printf '#================================================================\n'

uninstall :
	cd $(DESTDIR)$(JAVADIR) && rm -f $(JARFILES)
	cd $(DESTDIR)$(LIBDIR) && rm -f $(LIBRARYFILES)

dist :
	$(MAKE) untabify
	$(MAKE) distclean
	rm -Rf "../$(PACKAGEDIR)" "../$(PACKAGETGZ)"
	cd .. && cp -R tkrzw-java $(PACKAGEDIR) && \
	  tar --exclude=".*" -cvf - $(PACKAGEDIR) | gzip -c > $(PACKAGETGZ)
	rm -Rf "../$(PACKAGEDIR)"
	sync ; sync

distclean : clean apidocclean
	cd example && $(MAKE) clean
	rm -rf Makefile config.cache config.log config.status config.tmp autom4te.cache

header : tkrzw.jar
	rm -rf $(HEADERFILES)
	CLASSPATH=tkrzw.jar $(JAVAC) $(JAVAFILES) -h .

check :
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test utility
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test status
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test basic
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test process
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test iter
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test thread
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test search
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test export
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test file
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test index
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --path casket.tkh --params "num_buckets=100000" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --path casket.tkh --params "num_buckets=100000" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --path casket.tkt --params "key_comparator=decimal" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --path casket.tkt --params "key_comparator=decimal" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --path casket.tks --params "step_unit=3" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --path casket.tks --params "step_unit=3" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --params "dbm=tiny,num_buckets=100000" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --params "dbm=baby,key_comparator=decimal" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --params "dbm=stdhash,num_buckets=100000" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test perf \
	  --params "dbm=stdtree" --iter 20000 --threads 5 --random
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test wicked \
	  --path casket.tkh --params "num_buckets=100000" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test wicked \
	  --path casket.tkt --params "key_comparator=decimal" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test wicked \
	  --path casket.tks --params "step_unit=3" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test wicked \
	  --params "dbm=tiny,num_buckets=100000" --iter 20000 --threads 5
	$(RUNENV) $(JAVARUN) $(JAVARUNFLAGS) tkrzw.Test wicked \
	  --params "dbm=baby,key_comparator=decimal" --iter 20000 --threads 5
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Checking completed.\n'
	@printf '#================================================================\n'

apidoc :
	$(MAKE) apidocclean
	mkdir -p api-doc
	mkdir -p api-doc-tmp
	\ls *.java | while read file ; \
	  do \
	    sed -e 's/public static class X/private static class X/' $$file > api-doc-tmp/$$file ; \
	  done
	$(JAVADOC) $(JAVADOCFLAGS) -windowtitle tkrzw -overview overview.html \
	  -locale "en" -J-D"user.language=en" -d api-doc api-doc-tmp/*.java
	rm -rf api-doc-tmp

apidocclean :
	rm -rf api-doc api-doc-tmp

.PHONY : all clean install casket check apidoc apidocclean

#================================================================
# Suffix rules
#================================================================

.SUFFIXES :
.SUFFIXES : .cc .o

.cc.o :
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

#================================================================
# Building binaries
#================================================================

tkrzw.jar : $(JAVAFILES)
	$(JAVAC) $(JAVACFLAGS) $(JAVAFILES)
	$(JAR) cvf $@ tkrzw/*.class
	rm -rf tkrzw

libjtkrzw.so.$(LIBVER).$(LIBREV).0 : $(LIBOBJFILES)
	$(CXX) $(CXXFLAGS) -shared -Wl,-soname,libjtkrzw.so.$(LIBVER) -o $@ \
	  $(LIBOBJFILES) $(LDFLAGS) $(LIBS)

libjtkrzw.so.$(LIBVER) : libjtkrzw.so.$(LIBVER).$(LIBREV).0
	ln -f -s libjtkrzw.so.$(LIBVER).$(LIBREV).0 $@

libjtkrzw.so : libjtkrzw.so.$(LIBVER).$(LIBREV).0
	ln -f -s libjtkrzw.so.$(LIBVER).$(LIBREV).0 $@

libjtkrzw.$(LIBVER).$(LIBREV).0.dylib : $(LIBOBJFILES)
	$(CXX) $(CXXFLAGS) -dynamiclib -o $@ \
	  -install_name $(LIBDIR)/libjtkrzw.$(LIBVER).dylib \
	  -current_version $(LIBVER).$(LIBREV).0 -compatibility_version $(LIBVER) \
	  $(LIBOBJFILES) $(LDFLAGS) $(LIBS)

libjtkrzw.$(LIBVER).dylib : libjtkrzw.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libjtkrzw.$(LIBVER).$(LIBREV).0.dylib $@

libjtkrzw.dylib : libjtkrzw.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libjtkrzw.$(LIBVER).$(LIBREV).0.dylib $@

libjtkrzw.jnilib : libjtkrzw.dylib
	ln -f -s libjtkrzw.dylib $@

tkrzw.o : $(HEADERFILES)

$(HEADERFILES) : header

# END OF FILE
